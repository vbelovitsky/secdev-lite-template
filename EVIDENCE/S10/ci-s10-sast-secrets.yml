name: S10 - SAST & Secrets
on:
  workflow_dispatch:
  push:
    paths:
      - '**/*.py'
      - 'security/semgrep/**'
      - 'security/.gitleaks.toml'
      - '.github/workflows/ci-s10-sast-secrets.yml'
jobs:
  s10:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Ensure evidence dirs
        run: mkdir -p EVIDENCE/S10

      - name: Semgrep CI (SARIF)
        run: |
          docker run --rm \
            -v "$PWD:/src" \
            returntocorp/semgrep:latest semgrep ci \
              --config p/security-audit \
              --config /src/security/semgrep/rules.yml \
              --sarif \
              --output /src/EVIDENCE/S10/semgrep.sarif \
              --metrics=off || true

      - name: Gitleaks detect
        run: |
          docker run --rm -v $PWD:/repo zricethezav/gitleaks:latest detect \
            --config=/repo/security/.gitleaks.toml \
            --source=/repo \
            --report-format=json \
            --report-path=/repo/EVIDENCE/S10/gitleaks.json || true

      - uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: S10_EVIDENCE
          path: EVIDENCE/S10

  s10-quality-gate:
    needs: s10
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4.1.3
        with:
          name: S10_EVIDENCE
          path: EVIDENCE/S10
      - name: Enforce SAST & secrets quality gate
        run: |
          set -euo pipefail
          SEMGREP_REPORT="EVIDENCE/S10/semgrep.sarif"
          GITLEAKS_REPORT="EVIDENCE/S10/gitleaks.json"
          if [ ! -s "${SEMGREP_REPORT}" ]; then
            echo "::error::Missing Semgrep SARIF report at ${SEMGREP_REPORT}"
            exit 1
          fi
          SEMGREP_CRITICAL=$(jq -r '
            reduce (.runs // [])[] as $run ([]; . + ($run.results // []))
            | map(
                select(
                  ((.level // "" | ascii_downcase) == "error")
                  or ((.properties.severity // "" | ascii_downcase) == "critical")
                )
              )
            | length
          ' "${SEMGREP_REPORT}")
          echo "Semgrep critical findings: ${SEMGREP_CRITICAL}"
          if [ "${SEMGREP_CRITICAL}" -gt 0 ]; then
            echo "::error::SAST quality gate failed: expected 0 critical findings, found ${SEMGREP_CRITICAL}"
            exit 1
          fi
          if [ ! -s "${GITLEAKS_REPORT}" ]; then
            echo "::error::Missing Gitleaks report at ${GITLEAKS_REPORT}"
            exit 1
          fi
          GITLEAKS_FINDINGS=$(jq -r '
            if type == "array" then
              length
            elif type == "object" and has("leaks") then
              (.leaks // []) | length
            else
              length
            end
          ' "${GITLEAKS_REPORT}")
          echo "Gitleaks findings: ${GITLEAKS_FINDINGS}"
          if [ "${GITLEAKS_FINDINGS}" -gt 0 ]; then
            echo "::error::Secrets quality gate failed: expected 0 secrets, found ${GITLEAKS_FINDINGS}"
            exit 1
          fi
          echo "SAST & secrets quality gate passed (critical SAST = 0, secrets = 0)."