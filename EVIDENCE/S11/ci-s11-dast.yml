name: S11 - DAST (ZAP)
on:
  workflow_dispatch:
  push:
    paths:
      - 'app/**'
      - '.github/workflows/ci-s11-dast.yml'
jobs:
  s11:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Ensure evidence dirs
        run: mkdir -p EVIDENCE/S11

      - name: Setup Python & run app
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - run: pip install -r requirements.txt
      - run: uvicorn app.main:app --host 0.0.0.0 --port 8080 &
      - run: timeout 10 bash -c 'until curl -sf http://localhost:8080/healthz; do sleep 1; done'

      - name: Prepare ZAP workspace
        run: |
          mkdir -p zap-work
          chmod 777 zap-work

      - name: ZAP Baseline
        run: |
          docker run --rm --network host -v $PWD/zap-work:/zap/wrk zaproxy/zap-stable zap-baseline.py -t http://localhost:8080 -r zap_baseline.html -J zap_baseline.json -d || true
          mv zap-work/zap_baseline.* EVIDENCE/S11/ || true

      - uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: S11_EVIDENCE
          path: EVIDENCE/S11

      - name: Enforce DAST quality gate
        if: ${{ always() }}
        run: |
          set -euo pipefail

          REPORT="EVIDENCE/S11/zap_baseline.json"

          if [ ! -s "${REPORT}" ]; then
            echo "::error::Missing ZAP report at ${REPORT}"
            exit 1
          fi

          HIGH_OR_CRITICAL=$(jq -r '
            [
              .site[]? | .alerts[]? |
              ((.riskcode // "0") | tonumber? ) as $code |
              (.riskdesc // "" | ascii_downcase) as $desc |
              select(
                ($code != null and $code >= 3)
                or ($desc | contains("high"))
                or ($desc | contains("critical"))
              )
            ] | length
          ' "${REPORT}")

          CRITICAL_COUNT=$(jq -r '
            [
              .site[]? | .alerts[]? |
              ((.riskcode // "0") | tonumber? ) as $code |
              (.riskdesc // "" | ascii_downcase) as $desc |
              select(
                ($code != null and $code >= 4)
                or ($desc | contains("critical"))
              )
            ] | length
          ' "${REPORT}")

          if [ "${HIGH_OR_CRITICAL}" = "null" ] || [ -z "${HIGH_OR_CRITICAL}" ]; then
            HIGH_OR_CRITICAL=0
          fi
          if [ "${CRITICAL_COUNT}" = "null" ] || [ -z "${CRITICAL_COUNT}" ]; then
            CRITICAL_COUNT=0
          fi

          HIGH_COUNT=$((HIGH_OR_CRITICAL - CRITICAL_COUNT))
          if [ "${HIGH_COUNT}" -lt 0 ]; then
            HIGH_COUNT=0
          fi

          echo "ZAP critical alerts: ${CRITICAL_COUNT}"
          echo "ZAP high alerts: ${HIGH_COUNT}"

          if [ "${CRITICAL_COUNT}" -gt 0 ]; then
            echo "::error::DAST quality gate failed: expected 0 critical alerts, found ${CRITICAL_COUNT}"
            exit 1
          fi

          if [ "${HIGH_COUNT}" -gt 0 ]; then
            echo "::error::DAST quality gate failed: expected 0 high alerts, found ${HIGH_COUNT}"
            exit 1
          fi

          echo "DAST quality gate passed (critical = 0, high = 0)."
